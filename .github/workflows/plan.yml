# .github/workflows/plan.yml

name: 'Terraform Plan & Validate'

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/plan.yml'

env:
  TF_WORKING_DIR: ./terraform

jobs:
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - name: '1. Checkout do Reposit√≥rio'
        uses: actions/checkout@v4

      - name: '2. Autentica√ß√£o com Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: '3. Setup do Terraform'
        uses: hashicorp/setup-terraform@v3

      - name: '4. Terraform Init'
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" init \
            -backend-config="bucket=${{ secrets.GCS_BACKEND_BUCKET }}" \
            -backend-config="prefix=server-mine-v2/terraform.tfstate"

      - name: '5. Validar e Analisar C√≥digo Terraform'
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" fmt -check
          terraform -chdir="${{ env.TF_WORKING_DIR }}" validate
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
          trivy config --exit-code 1 --severity HIGH,CRITICAL ${{ env.TF_WORKING_DIR }}

      - name: '6. Terraform Plan'
        id: tf-plan
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" plan -no-color -out=tfplan \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="zone=${{ secrets.GCP_ZONE }}" \
            -var="gcp_user_email=${{ secrets.GCP_SERVICE_ACCOUNT }}" \
            -var="github_repo=${{ secrets.REMOTE_REPO }}" \
            -var="velocity_secret=${{ secrets.VELOCITY_FORWARDING_SECRET }}" # <-- CORRIGIDO AQUI
      
      - name: '7. Gerar Resumo do Plano para o PR'
        id: plan-summary
        run: |
          summary=$(terraform -chdir="${{ env.TF_WORKING_DIR }}" show -no-color tfplan | tail -n 1)
          comment="#### Terraform Plan Summary üìñ\n\n\`\`\`\n${summary}\n\`\`\`\n\n*A detailed plan is available in the logs of this pipeline run.*"
          echo "comment_body<<EOF" >> $GITHUB_OUTPUT
          echo "$comment" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: '8. Publicar Resumo do Plano no Pull Request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const output = `${{ steps.plan-summary.outputs.comment_body }}`;
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Summary')
            );
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
