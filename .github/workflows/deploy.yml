# .github/workflows/deploy.yml

name: 'Deploy Infra & Application'

on:
  push:
    branches: [ main ]

env:
  GCP_PROJECT_ID:                ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION:                    ${{ secrets.GCP_REGION }}
  GCP_ZONE:                      ${{ secrets.GCP_ZONE }}
  GCP_USER_EMAIL:                ${{ secrets.GCP_USER_EMAIL }}
  INSTANCE_NAME:                 ${{ secrets.INSTANCE_NAME }}
  FORWARDING_SECRET:             ${{ secrets.FORWARDING_SECRET }}
  FORWARDING_SECRET_FILE:        "/config/forwarding.secret"
  TF_WORKING_DIR:                ./terraform
  TF_VAR_workload_identity_pool: ${{ secrets.WORKLOAD_IDENTITY_POOL }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: '1. Checkout do Repositório'
        uses: actions/checkout@v4

      - name: '2. Autenticação com Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account:           ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: '3. Setup do Terraform'
        uses: hashicorp/setup-terraform@v3

      - name: '4. Terraform Init'
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" init \
            -backend-config="bucket=${{ secrets.GCS_BACKEND_BUCKET }}" \
            -backend-config="prefix=server-mine-v2/terraform.tfstate"

      - name: '5. Validar e Analisar Código Terraform'
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" fmt -check
          terraform -chdir="${{ env.TF_WORKING_DIR }}" validate
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --chdir="${{ env.TF_WORKING_DIR }}"

      - name: '6. YAML Lint'
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .github/workflows

      - name: '7. Segurança: instalar e rodar Trivy'
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key \
            | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] \
            https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" \
            | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install trivy -y
          trivy config --exit-code 1 --severity HIGH,CRITICAL "${{ env.TF_WORKING_DIR }}"

      - name: '8. Terraform Plan'
        id: plan
        continue-on-error: true
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" plan -no-color -out=tfplan \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="zone=${{ secrets.GCP_ZONE }}" \
            -var="gcp_user_email=${{ env.GCP_USER_EMAIL }}" \
            -var="github_repo=${{ secrets.REMOTE_REPO }}" \
            -var="forwarding_secret=${{ secrets.FORWARDING_SECRET }}"

      - name: '9. Terraform Apply'
        if: steps.plan.outputs.exitcode == '2'
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" apply -auto-approve tfplan

      - name: '10. Instalar Dependências da Aplicação'
        run: |
          python3 -m pip install numpy --user
          sudo apt-get update
          sudo apt-get install -y gettext-base jq curl

      - name: '11. Gerar forwarding.secret'
        run: |
          mkdir -p "${{ env.TF_WORKING_DIR }}/velocity"
          envsubst '${FORWARDING_SECRET}' \
            < "${{ env.TF_WORKING_DIR }}/velocity/forwarding.secret.template" \
            > "${{ env.TF_WORKING_DIR }}/velocity/forwarding.secret"

      - name: '12. Gerar paper-global.yml'
        run: |
          mkdir -p "${{ env.TF_WORKING_DIR }}/paper/configs"
          envsubst '${FORWARDING_SECRET}' \
            < "${{ env.TF_WORKING_DIR }}/paper/configs/paper-global.yml.template" \
            > "${{ env.TF_WORKING_DIR }}/paper/configs/paper-global.yml"

      - name: '13. Gerar velocity.toml'
        run: |
          mkdir -p "${{ env.TF_WORKING_DIR }}/velocity"
          envsubst '${FORWARDING_SECRET_FILE}' \
            < "${{ env.TF_WORKING_DIR }}/velocity/velocity.toml.template" \
            > "${{ env.TF_WORKING_DIR }}/velocity/velocity.toml"

      - name: '14. Baixar Plugins do Servidor'
        run: |
          chmod +x "${{ env.TF_WORKING_DIR }}/scripts/fetch-plugins.sh"
          "${{ env.TF_WORKING_DIR }}/scripts/fetch-plugins.sh"

      - name: '15. Copiar para a VM'
        run: |
          gcloud compute scp --recurse \
            "${{ env.TF_WORKING_DIR }}/docker-compose.yml" \
            "${{ env.TF_WORKING_DIR }}/velocity" \
            "${{ env.TF_WORKING_DIR }}/paper/configs" \
            "${{ env.TF_WORKING_DIR }}/paper/plugins" \
            ${{ env.INSTANCE_NAME }}:~/deploy/ \
            --zone="${{ env.GCP_ZONE }}" \
            --project="${{ env.GCP_PROJECT_ID }}" \
            --tunnel-through-iap

      - name: '16. Reiniciar Containers na VM'
        run: |
          gcloud compute ssh ${{ env.INSTANCE_NAME }} \
            --zone="${{ env.GCP_ZONE }}" \
            --project="${{ env.GCP_PROJECT_ID }}" \
            --tunnel-through-iap --command="
              sudo rm -rf /mnt/data/minecraft/velocity \
                          /mnt/data/minecraft/paper/configs \
                          /mnt/data/minecraft/paper/plugins && \
              sudo mkdir -p /mnt/data/minecraft/paper/plugins && \
              sudo mv ~/deploy/docker-compose.yml /mnt/data/minecraft/docker-compose.yml && \
              sudo mv ~/deploy/velocity      /mnt/data/minecraft/velocity && \
              sudo mv ~/deploy/configs       /mnt/data/minecraft/paper/configs && \
              sudo mv ~/deploy/plugins/* /mnt/data/minecraft/paper/plugins/ && \
              sudo chmod -R a+rwX /mnt/data/minecraft/velocity && \
              sudo chmod -R a+rwX /mnt/data/minecraft/paper/plugins && \
              cd /mnt/data/minecraft && \
              sudo docker compose down || true && \
              sudo docker compose up -d
            "
