# Nome do workflow, refletindo que ele gerencia tanto a infra quanto a aplicação.
name: Deploy Infra & Application

# Gatilho (trigger): Define quando a pipeline deve rodar.
on:
  push:
    branches:
      - main

# Bloco 'env' unificado com todas as variáveis de ambiente.
env:
  GCP_PROJECT_ID:         ${{ secrets.GCP_PROJECT_ID }}
  GCP_ZONE:               ${{ secrets.GCP_ZONE }}
  INSTANCE_NAME:          ${{ secrets.INSTANCE_NAME }}
  FORWARDING_SECRET:      ${{ secrets.FORWARDING_SECRET }}
  FORWARDING_SECRET_FILE: "/config/forwarding.secret"
  TF_WORKING_DIR:         ./terraform

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: 1. Checkout do Repositório
        uses: actions/checkout@v4

      - name: 2. Autenticação com Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: 3. Setup do Terraform
        uses: hashicorp/setup-terraform@v3

      - name: 4. Terraform Init
        id: init
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" init \
            -backend-config="bucket=${{ secrets.GCS_BACKEND_BUCKET }}" \
            -backend-config="prefix=server-mine-v2/terraform.tfstate"

      - name: Remove stale Terraform lock
        run: |
          gsutil rm -f gs://${{ secrets.GCS_BACKEND_BUCKET }}/server-mine-v2/terraform.tfstate.tflock || true

      # --- PASSO DE VALIDAÇÃO E SEGURANÇA INSERIDO AQUI ---
      - name: 5. Validar e Analisar Código Terraform
        run: |
          echo "--- Verificando formatação do código ---"
          terraform -chdir="${{ env.TF_WORKING_DIR }}" fmt -check
          
          echo "--- Validando sintaxe do Terraform ---"
          terraform -chdir="${{ env.TF_WORKING_DIR }}" validate

          echo "--- Instalando Trivy para análise de segurança ---"
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
          
          echo "--- Rodando análise de segurança com Trivy ---"
          trivy config --exit-code 1 --severity HIGH,CRITICAL ${{ env.TF_WORKING_DIR }}

      - name: 6. Terraform Plan
        id: plan
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" plan -no-color -out=tfplan -lock-timeout=300s \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="zone=${{ secrets.GCP_ZONE }}" \
            -var="gcp_user_email=${{ secrets.GCP_USER_EMAIL }}" \
            -var="github_repo=${{ secrets.REMOTE_REPO }}" \
            -var="velocity_secret=${{ secrets.VELOCITY_SECRET }}" # <-- ADICIONADO AQUI
            -var="github_service_account_email=${{ secrets.GCP_SERVICE_ACCOUNT }}" \
            -var="github_workload_identity_provider=${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}"
        continue-on-error: true

      - name: 7. Terraform Apply
        if: steps.plan.outputs.exitcode == 2
        run: terraform -chdir="${{ env.TF_WORKING_DIR }}" apply -auto-approve -lock-timeout=300s tfplan

      # --- ETAPA DE DEPLOY DA APLICAÇÃO - Lógica original 100% preservada ---

      - name: 8. Instalar Dependências da Aplicação
        run: |
          python3 -m pip install numpy --user
          sudo apt-get update
          sudo apt-get install -y gettext-base jq curl

      - name: 9. Gerar forwarding.secret
        run: |
          mkdir -p terraform/velocity
          envsubst '${FORWARDING_SECRET}' < terraform/velocity/forwarding.secret.template > terraform/velocity/forwarding.secret

      - name: 10. Gerar paper-global.yml
        run: |
          mkdir -p terraform/paper/configs
          envsubst '${FORWARDING_SECRET}' < terraform/paper/configs/paper-global.yml.template > terraform/paper/configs/paper-global.yml

      - name: 11. Gerar velocity.toml
        run: |
          mkdir -p terraform/velocity
          envsubst '${FORWARDING_SECRET_FILE}' < terraform/velocity/velocity.toml.template > terraform/velocity/velocity.toml

      - name: 12. Baixar Plugins do Servidor
        run: |
          chmod +x terraform/scripts/fetch-plugins.sh
          terraform/scripts/fetch-plugins.sh

      - name: 13. Copiar Arquivos para a VM
        run: |
          gcloud compute scp --recurse \
            terraform/docker-compose.yml \
            terraform/velocity \
            terraform/paper/configs \
            terraform/paper/plugins \
            ${{ env.INSTANCE_NAME }}:~/deploy/ \
            --zone=${{ env.GCP_ZONE }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --tunnel-through-iap

      - name: 14. Reiniciar os Containers do Minecraft na VM
        run: |
          gcloud compute ssh ${{ env.INSTANCE_NAME }} \
            --zone ${{ env.GCP_ZONE }} \
            --project ${{ env.GCP_PROJECT_ID }} \
            --tunnel-through-iap --command="
              sudo rm -rf /mnt/data/minecraft/velocity \
                          /mnt/data/minecraft/paper/configs \
                          /mnt/data/minecraft/paper/plugins && \
              sudo mkdir -p /mnt/data/minecraft/paper/plugins && \
              sudo mv ~/deploy/docker-compose.yml /mnt/data/minecraft/docker-compose.yml && \
              sudo mv ~/deploy/velocity      /mnt/data/minecraft/velocity && \
              sudo mv ~/deploy/configs       /mnt/data/minecraft/paper/configs && \
              sudo mv ~/deploy/plugins/* /mnt/data/minecraft/paper/plugins/ && \
              sudo chmod -R a+rwX /mnt/data/minecraft/velocity && \
              sudo chmod -R a+rwX /mnt/data/minecraft/paper/plugins && \
              cd /mnt/data/minecraft && \
              sudo docker compose down || true && \
              sudo docker compose up -d
            "