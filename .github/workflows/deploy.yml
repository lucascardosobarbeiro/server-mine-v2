# .github/workflows/deploy.yml

name: Deploy Infra & Application

on:
  push:
    branches:
      - main

env:
  GCP_PROJECT_ID:         ${{ secrets.GCP_PROJECT_ID }}
  GCP_ZONE:               ${{ secrets.GCP_ZONE }}
  INSTANCE_NAME:          ${{ secrets.INSTANCE_NAME }}
  FORWARDING_SECRET:      ${{ secrets.FORWARDING_SECRET }} # Mantido para a configuração da aplicação
  FORWARDING_SECRET_FILE: "/config/forwarding.secret"
  TF_WORKING_DIR:         ./terraform

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: 1. Checkout do Repositório
        uses: actions/checkout@v4

      - name: 2. Autenticação com Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: 3. Setup do Terraform
        uses: hashicorp/setup-terraform@v3

      - name: 4. Terraform Init
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" init \
            -backend-config="bucket=${{ secrets.GCS_BACKEND_BUCKET }}" \
            -backend-config="prefix=server-mine-v2/terraform.tfstate"

      - name: 5. Validar e Analisar Código Terraform
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" fmt -check
          terraform -chdir="${{ env.TF_WORKING_DIR }}" validate
          # Instalação e execução do Trivy
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
          trivy config --exit-code 1 --severity HIGH,CRITICAL ${{ env.TF_WORKING_DIR }}

      - name: 6. Terraform Plan
        id: plan
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" plan -no-color -out=tfplan \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="region=${{ secrets.GCP_REGION }}" \
            -var="zone=${{ secrets.GCP_ZONE }}" \
            -var="gcp_user_email=${{ secrets.GCP_SERVICE_ACCOUNT }}" \
            -var="github_repo=${{ secrets.REMOTE_REPO }}" \
            -var="velocity_secret=${{ secrets.VELOCITY_FORWARDING_SECRET }}" # <-- CORRIGIDO AQUI
        continue-on-error: true

      - name: 7. Terraform Apply
        if: steps.plan.outputs.exitcode == 2
        run: terraform -chdir="${{ env.TF_WORKING_DIR }}" apply -auto-approve tfplan

      - name: 8. Instalar Dependências e Gerar Configs
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base jq curl
          # Lógica de geração de configs usando FORWARDING_SECRET
          mkdir -p terraform/velocity
          envsubst '${FORWARDING_SECRET}' < terraform/velocity/forwarding.secret.template > terraform/velocity/forwarding.secret
          mkdir -p terraform/paper/configs
          envsubst '${FORWARDING_SECRET}' < terraform/paper/configs/paper-global.yml.template > terraform/paper/configs/paper-global.yml
          mkdir -p terraform/velocity
          envsubst '${FORWARDING_SECRET_FILE}' < terraform/velocity/velocity.toml.template > terraform/velocity/velocity.toml
          
      - name: 9. Baixar Plugins do Servidor
        run: |
          chmod +x terraform/scripts/fetch-plugins.sh
          terraform/scripts/fetch-plugins.sh

      - name: 10. Copiar Arquivos para a VM
        run: |
          gcloud compute scp --recurse \
            terraform/docker-compose.yml \
            terraform/velocity \
            terraform/paper/configs \
            terraform/paper/plugins \
            ${{ env.INSTANCE_NAME }}:~/deploy/ \
            --zone=${{ env.GCP_ZONE }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --tunnel-through-iap

      - name: 11. Reiniciar os Containers do Minecraft na VM
        run: |
          gcloud compute ssh ${{ env.INSTANCE_NAME }} \
            --zone ${{ env.GCP_ZONE }} \
            --project ${{ env.GCP_PROJECT_ID }} \
            --tunnel-through-iap --command="
              sudo rm -rf /mnt/data/minecraft/velocity /mnt/data/minecraft/paper/configs /mnt/data/minecraft/paper/plugins && \
              sudo mkdir -p /mnt/data/minecraft/paper/plugins && \
              sudo mv ~/deploy/docker-compose.yml /mnt/data/minecraft/docker-compose.yml && \
              sudo mv ~/deploy/velocity      /mnt/data/minecraft/velocity && \
              sudo mv ~/deploy/configs       /mnt/data/minecraft/paper/configs && \
              sudo mv ~/deploy/plugins/* /mnt/data/minecraft/paper/plugins/ && \
              cd /mnt/data/minecraft && \
              sudo docker compose down || true && \
              sudo docker compose up -d
            "
